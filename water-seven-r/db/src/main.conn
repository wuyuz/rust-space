
use std::fmt::format;

use futures::executor::block_on;
use sea_orm::{Database, DbErr, ConnectionTrait, DbBackend, Statement };


const DATABASE_URL: &str = "mysql://root:123456@150.158.92.84:31229";

async fn run() -> Result<(), DbErr> {
    let db = Database::connect(DATABASE_URL).await?;

    let db_name = "water_seven";
    let db = &match db.get_database_backend(){
        DbBackend::MySql => {
            db.execute(Statement::from_string(
                db.get_database_backend(),
                format!("CREATE DATABASE IF NOT EXISTS `{}`;",db_name),
            ))
            .await?;
            
            let url = format!("{}/{}",DATABASE_URL,db_name);
            Database::connect(&url).await?
        }
        DbBackend::Postgres => {
                       db.execute(Statement::from_string(
                           db.get_database_backend(),
                           format!("DROP DATABASE IF EXISTS \"{}\";", db_name),
                       ))
                       .await?;
                       db.execute(Statement::from_string(
                           db.get_database_backend(),
                           format!("CREATE DATABASE \"{}\";", db_name),
                       ))
                       .await?;
            
                       let url = format!("{}/{}", DATABASE_URL, db_name);
                       Database::connect(&url).await?
        }
        DbBackend::Sqlite => db,
    };

    Ok(())
}

fn main() {
    if let Err(err) = block_on(run()) {
        panic!("{}", err);
    }
}
