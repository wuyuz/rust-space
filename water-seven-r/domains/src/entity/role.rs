//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1
use serde::{Deserialize, Serialize};
use sea_orm::entity::prelude::*;
// use serde::ser::{Serialize, Serializer, SerializeStruct};


#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "role")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub role_name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation,Serialize, Deserialize)]
pub enum Relation {
    #[sea_orm(has_many = "super::user::Entity")]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// impl Serialize for ActiveModel {

//     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
//         where
//             S: Serializer 
//         {
//             let mut state = serializer.serialize_struct("ActiveModel", 3)?;
//             state.serialize_field("id", &self.id)?;
//             state.serialize_field("g", &self.g)?;

//         }
// }
